"""
Smart File Organizer v1.0
Automatyczne sortowanie plik√≥w wed≈Çug typu i daty
Autor: pzoladkiewicz
Data: 2025-06-24
"""

import os
import shutil
from pathlib import Path
import datetime

def create_folders(base_path):
    """
    Tworzy foldery dla r√≥≈ºnych typ√≥w plik√≥w
    
    Args:
        base_path (str): ≈öcie≈ºka do folderu g≈Ç√≥wnego
        
    Returns:
        dict: S≈Çownik z kategoriami i rozszerzeniami

    """
    
    folders = {
        'Documents': ['.pdf', '.doc', 'docx', '.txt', '.rtf'],
        'Images': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff'],
        'Spreadsheets': ['.xls', '.xlsx', '.csv', '.ods'],
        'Presentations': ['.ppt', '.pptx', 'odp'],
        'Archives': ['.zip', '.rar', '.7z', '.tar', 'gz'],
        'Others': []    
        }

    print(f"Tworzƒô foldery w: {base_path}")
    
    for folder_name in folders.keys():
        folder_path = os.path.join(base_path, folder_name)
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
            print(f"‚úì Utworzono folder: {folder_name}")
        else:
            print(f"‚Üí Folder juz istnieje: {folder_name}")
            
    return folders

def get_file_category(file_extension, categories):
    """
    Okresla kategoriƒô pliku na podstawie rozszerzenia
    
    Args:
        file_extension (str): Rozszerzenie pliku (np. '.pdf')
        categories (dict): S≈Çownik kategorii i rozszerze≈Ñ
        
    Returns:
        str: Nazwa kategorii
    """

    file_extension = file_extension.lower()
    
    for category, extensions in categories.items():
        if file_extension in extensions:
            return category
        
    return 'Others'

def organize_files(source_folder, destination_folder):
    """
    G≈Ç√≥wna funkcja organizujƒÖca pliki
    
    Args:
        source_folder (str): Folder ≈∫r√≥d≈Çowy z plikami
        destination_folder (str): Folder docelowy
    """
    print("=" * 50)
    print("üóÇÔ∏è  SMART FILE ORGANIZER")
    print("=" * 50)
    print(f"üìÅ Folder ≈∫r√≥d≈Çowy: {source_folder}")
    print(f"üìÇ Folder docelowy: {destination_folder}")
    print("-" * 50)
    
    # Sprawd≈∫, czy folder ≈∫r√≥d≈Çowy istnieje
    if not os.path.exists(source_folder):
        print(f"‚ùå B≈ÅƒÑD: Folder {source_folder} nie istnieje!")
        return False   
    
    # Utw√≥rz folder docelowy jesli nie istnieje
    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)
        print(f"‚úì Utworzono folder docelowy: {destination_folder}")
        
    # Utw√≥rz foldery kategorii
    categories = create_folders(destination_folder)
    
    # Liczniki
    
    moved_files = 0
    errors = 0
    skipped_files = 0
    
    print("\nüîÑ Rozpoczynam organizacjƒô plik√≥w...")
    print("-" * 50)
    
    # Przejd≈∫ przez wszystkie pliki w folderze ≈∫r√≥d≈Çowym
    for filename in os.listdir(source_folder):
        source_path = os.path.join(source_folder, filename)
    
        # Pomi≈Ñ foldery, organizuj tylko pliki
        if os.path.isfile(source_path):
            try:
                # Pobierz rozszerzenie pliku
                file_extension = Path(filename).suffix
                
                if not file_extension:
                    print(f"‚ö†Ô∏è  Pominiƒôto plik bez rozszerzenia: {filename}")
                    skipped_files += 1
                    continue
                
                # Okresl kategoriƒô
                category = get_file_category(file_extension, categories)
    
    
                # ≈öcie≈ºka docelowa
                destination_path = os.path.join(destination_folder, category, filename)
                
                # Sprawd≈∫, czy plik ju≈º istnieje w miejscu docelowym
                if os.path.exists(destination_path):
                    print(f"‚ö†Ô∏è  Plik ju≈º istnieje: {filename} ‚Üí {category}/")
                    skipped_files +=  1
                    continue
                
                # Przenies plik
                shutil.move(source_path, destination_path)
                print(f"‚úÖ Przeniesiono: {filename} ‚Üí {category}/")
                moved_files += 1
                
            except Exception as e:
                print(F"‚ùå B≈ÅƒÑD przy przenoszeniu {filename}: {e}")
                errors += 1
                
    # Podsumowanie
    print("\n" + "=" * 50)
    print("üìä PODSUMOWANIE")
    print("=" * 50)
    print(f"‚úÖ Przeniesiono plik√≥w: {moved_files}")
    print(f"‚ö†Ô∏è  Pominiƒôto plik√≥w: {skipped_files}")
    print(f"‚ùå B≈Çƒôd√≥w: {errors}")
    print(f"üìÅ ≈ÅƒÖczna liczba plik√≥w: {moved_files + skipped_files + errors}")
    
    return True

# Funkcja testowa
def test_organizer():
    """Funkcja do testowania organizatora"""
    print("üß™ TRYB TESTOWY")
    print("Przed uruchomieniem na prawdziwych plikach, przetestuj na kopii!")
    
    # ZMIE≈É TE ≈öCIE≈ªKI NA SWOJE!
    source = r"C:\Users\pzoladkiewicz\Desktop\TestFolder"
    destination = r"C:\Users\pzoladkiewicz\Desktop\OrganizedFiles"
    
    print("\n‚ö†Ô∏è  UWAGA: Sprawd≈∫ ≈õcie≈ºki przed uruchomieniem!")
    print(f"≈πr√≥d≈Ço: {source}")
    print(f"Cel: {destination}")
    
    # Odkomentuj poni≈ºszƒÖ liniƒô gdy bƒôdziesz gotowy
    organize_files(source, destination)

if __name__ == "__main__":
    test_organizer()
    
    
    
    
    
    
    
    
    
    
    
    
    
